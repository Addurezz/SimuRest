@startuml
'https://plantuml.com/class-diagram
package Core.Services.Builder {
    class RouteRuleBuilder {
        - Router _router
        - SimuServerBuilder _serverBuilder
        - RouteRule _rule
        - RouteTable _routeTable
        - ServerMemory _memory
    
        + RouteRuleBuilder(serverBuilder: SimuServerBuilder, route: Route)
        + Responds(handler: Func<SimuRequest, SimuResponse>): RouteRuleBuilder
        + Delay(ms: int): RouteRuleBuilder
        + SaveInMemory(): RouteRuleBuilder
        + RespondFromMemory(): RouteRuleBuilder
        + Apply(): SimuServerBuilder
    }
    
    class SimuServerBuilder {
        + Server: SimuServer
        + Memory: ServerMemory
        + SimuServerBuilder(server: SimuServer)
        + SimuServerBuilder()
        + Setup(method: HttpMethod, path: string): RouteRuleBuilder
        + Port(port: int): SimuServerBuilder
    }
}

interface IHttpContext {
    + Context : IHttpListenerContext
    + Response : IHttpListenerResponse
    + Url : Uri?
    + HttpMethod : string
    + Body : string
}

class HttpContextAdapter {
}

class ServerMemory {
    - _memory : Dictionary<string, object?>
    + Save(path : string, data : object) : void
    + Get(path : string) : object?
}

package Core.Models {
    class SimuRequest {
        + Path : string
        + Method : HttpMethod
        + Body : string
        + SimuRequest(method : HttpMethod, path : string, body : string)
    }
    
    class SimuResponse {
        + StatusCode : int
        + Body : string
        + NotFound : SimuResponse <<static>>
        + BadRequest : SimuResponse <<static>>
        + SimuResponse(status : int, body : string)
    }
    
    class Route {
        + Method : HttpMethod
        + Path : string
        + Route(method : HttpMethod, path : string)
    }
    
    class RouteRule {
        + Route : Route
        + Handler : Func<SimuRequest, SimuResponse>?
        + Delay : int
        + RouteRule(route : Route, handler : Func<SimuRequest, SimuResponse>?
        + Execute(request : SimuRequest) : Task<SimuResponse>
    }
}

package Core.Services {
    class SimuServer {
        + Handler : RequestHandler
        + Router : Router
        + RouteTable : RouteTable
        + Listener : HttpListener
        + Memory : ServerMemory
        + Port : int
        - _tasksLock : Object
        - _activeRequests : List<Task>
        - _cts : CancellationTokenSource
        
        + SimuServer(memory : ServerMemory, table : RouteTable)
        + Start() : Task
        + Stop() : Task
    }
    
    class RequestHandler {
        - ResponseWriter _writer
        - Router _router
        - Parser _parser
        - ServerMemory _memory
    
        + RequestHandler(router: Router, memory: ServerMemory)
        + Handle(ctx: HttpListenerContext) : Task
        + GetSimuRequestFromContext(ctx: IHttpContext) : SimuRequest
        + GetSimuResponse(req: SimuRequest) : Task<SimuResponse>
        + WriteToStream(ctx: IHttpContext, response: SimuResponse) : Task
    }
    
    class RouteTable {
        + {field} Routes : Dictionary<(HttpMethod, string), RouteRule>
        + Match(request : SimuRequest) : RouteRule
        + Insert(rule : RouteRule) : void
    }
    
    class Router {
        + Table : RouteTable
        + Router(table : RouteTable)
        + Handle(request : SimuRequest) : Task<SimuResponse>
    }
    
    class ResponseWriter {
        + Write(ctx : IHttpContext, response : SimuResponse) : void
    }
    
    class Parser {
        + Parse(ctx : IHttpContext) : SimuRequest?
    }
    
}


SimuServer *-- RequestHandler
SimuServer *-- Router
SimuServer *-- RouteTable
SimuServer *-- ServerMemory
SimuServer --> HttpListener

RequestHandler --> ResponseWriter
RequestHandler --> Router
RequestHandler --> Parser
RequestHandler --> ServerMemory

Router *-- RouteTable
RouteTable *-- RouteRule
RouteRule *-- Route


HttpContextAdapter ..|> IHttpContext

RouteRuleBuilder --> RouteRule
RouteRuleBuilder --> RouteTable
RouteRuleBuilder *-- SimuServerBuilder
RouteRuleBuilder --> ServerMemory

SimuServerBuilder *-- SimuServer



@enduml
