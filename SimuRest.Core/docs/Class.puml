@startuml
'https://plantuml.com/class-diagram
class RouteRuleBuilder {
    - SimuServerBuilder _serverBuilder
    - _provider : ServiceProvider
    - _rule : RouteRule

    + RouteRuleBuilder(serverBuilder: SimuServerBuilder, route: Route, provider : ServiceProvider)
    + Responds(handler: Func<SimuRequest, SimuResponse>): RouteRuleBuilder
    + Delay(ms: int): RouteRuleBuilder
    + SaveInMemory(): RouteRuleBuilder
    + RespondFromMemory(): RouteRuleBuilder
    + Apply(): SimuServerBuilder
}

class SimuServerBuilder {
    + Server: SimuServer
    + Memory: ServerMemory
    + SimuServerBuilder(server: SimuServer)
    + SimuServerBuilder()
    + Setup(method: HttpMethod, path: string): RouteRuleBuilder
    + Port(port: int): SimuServerBuilder
}


interface IHttpContext {
    + Context : IHttpListenerContext
    + Response : IHttpListenerResponse
    + Url : Uri?
    + HttpMethod : string
    + Body : string
}

class HttpContextAdapter {
}

class ServerMemory {
    - _memory : Dictionary<string, object?>
    + Save(path : string, data : object) : void
    + Get(path : string) : object?
}

class SimuServer {
    + Handler : RequestHandler
    + Listener : HttpListener
    + ServiceProvider : ServiceProvider
    + Port : int
    - _tasksLock : Object
    - _activeRequests : List<Task>
    - _cts : CancellationTokenSource

    + SimuServer(provider : ServiceProvider)
    + Start() : Task
    + Stop() : Task
}

class RequestHandler {
    + Handle(ctx: HttpListenerContext, provider : ServiceProvider) : Task
    - GetSimuRequestFromContext(provider : ServiceProvider, ctx: IHttpContext) : SimuRequest
    - GetSimuResponse(provider : ServiceProvider, req: SimuRequest) : Task<SimuResponse>
    - WriteToStream(provider : ServiceProvider, ctx: IHttpContext, response: SimuResponse) : Task
}

class Router {
    - Table : RouteTable
    + Handle(request : SimuRequest) : Task<SimuResponse>
    + InsertRouteRule(rule : RouteRule) : void
}

class RouteTable {
    + {field} Routes : Dictionary<(HttpMethod, string), RouteRule>
    + Match(request : SimuRequest) : RouteRule
    + Insert(rule : RouteRule) : void
}

class Route {
    + Method : HttpMethod
    + Path : string
    + Route(method : HttpMethod, path : string)
}

class RouteRule {
    + Route : Route
    + Handler : Func<SimuRequest, SimuResponse>?
    + Delay : int
    + RouteRule(route : Route, handler : Func<SimuRequest, SimuResponse>?
    + Execute(request : SimuRequest) : Task<SimuResponse>
}

class MessagingHandler {}

class ResponseWriter {
    + Write(ctx : IHttpContext, response : SimuResponse) : void
}

class Parser {
    + Parse(ctx : IHttpContext) : SimuRequest?
}   


class ServiceProvider {
    - {field}_services : Dictionary<Type, object>
    + Register<T>(T : object) : void
    + GetService<T>() : T
}

class SimuRequest {
    + Path : string
    + Method : HttpMethod
    + Body : string
    + SimuRequest(method : HttpMethod, path : string, body : string)
}

class SimuResponse {
    + StatusCode : int
    + Body : string
    + NotFound : SimuResponse <<static>>
    + BadRequest : SimuResponse <<static>>
    + SimuResponse(status : int, body : string)
}

SimuServer *-- ServiceProvider
SimuServer *-- RequestHandler
SimuServer *-- HttpListener

RequestHandler -u-> ServiceProvider
RequestHandler --> Router
RequestHandler --> ResponseWriter
RequestHandler --> Parser
Router *-- RouteTable

RouteTable --> RouteRule

RouteRule *-- Route

IHttpContext <|.. HttpContextAdapter

Router --> SimuRequest
Router --> SimuResponse

ResponseWriter --> SimuResponse

Parser --> SimuRequest
Parser --> IHttpContext

SimuServerBuilder *-- SimuServer

RouteRuleBuilder *-l- SimuServerBuilder
RouteRuleBuilder --> ServerMemory

@enduml
